id,comment,link,gcc or llvm,affected metrics,oracles,triggering conditions
llvm101241,found with handcrafted input but later projected to Debian code,https://github.com/llvm/llvm-project/issues/101241,LLVM,"B,M","branch_num,mcdc_num","constant,comma,type conversion,tautological compare"
llvm105341,found with Linux but (forcibly) projected to Debian code; this is a generic problem caused by dependent counter values and let's not assign any triggering condition; or should we say concurrency?,https://github.com/llvm/llvm-project/issues/105341,LLVM,"L,B","line,branch_val","concurrency"
LineCoverageBug.SL_1,old Python enum,https://github.com/llvm/llvm-project/issues/114622,LLVM,L,line,"macro,header,break"
LineCoverageBug.APACHE2_1,old Python enum;subsumes previous IdTbdThenClauseAfterTheLastCondition,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=117412,GCC,L,line,"multiline,function,dereference,type conversion"
LineCoverageBug.APACHE2_2,old Python enum,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=117415,GCC,L,line,"multiline,function,loop,if,dereference"
IdTbdCppSplitLine,,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=120319,GCC,"L,B","branch_num,line","function,C++,multiline,variable scope"
LineCoverageBug.LZMA_1,old Python enum;see also LineCoverageBug.GREP_3;subsumes previous macro less by 1 (ID TBD),https://gcc.gnu.org/bugzilla/show_bug.cgi?id=120321,GCC,L,line,"loop,variable scope,constant,no code"
LineCoverageBug.LZMA_4,old Python enum; a bit similar to 114622; subsumes previous LineCoverageBug.MAN_DB_1 and macro different defs (ID TBD),https://github.com/llvm/llvm-project/issues/140427,LLVM,L,line,"macro,return,goto,loop,if"
LineCoverageBug.LZMA_5,old Python enum,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=120492,GCC,L,line,"C++ standard library,type conversion"
LineCoverageBug.LZMA_6,old Python enum,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=120491,GCC,L,line,"C++,constructor,multiline"
LineCoverageBug.LZ4_1,old Python enum; revisit 1,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=120490,GCC,L,line,"switch-case,inline function"
LineCoverageBug.LZ4_2,old Python enum,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=120489,GCC,L,line,"loop,variable scope,continue,dereference"
LineCoverageBug.CURL_1,old Python enum,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=120484,GCC,L,line,"variable scope,loop,if"
LineCoverageBug.GREP_3,old Python enum;see also LineCoverageBug.LZMA_1,https://github.com/llvm/llvm-project/issues/116884,LLVM,L,line,"loop,break,constant"
BranchCoverageBug.MAWK_1,old Python enum; branch_val is triggered together with switch-case conv,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=120485,GCC,B,branch_val,"#line,header"
McdcBug.HOSTNAME_1,FIXME: entries before this one need to be aggregated from elsewhere; Python done; Google Sheets TODO,https://github.com/llvm/llvm-project/issues/131505,LLVM,"M,B","mcdc_num,branch_val,branch_num","macro,header,type conversion,dereference"
LineCoverageBug.INETUTILS_1,multi-line ternary that doesn't make sense in any way; see repo,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=120486,GCC,L,"line,branch_num","ternary,multiline"
LineCoverageBug.LZO2_1,two inline invocations (differ at the caller); see repo,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=120478,GCC,L,line,"inline function,multistmt"
line coverage inline function superimpose direct or indirect invocations, (differ at the callee); see repo,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=120482,GCC,L,line,"inline function,const keyword"
bug-string-vector,,https://github.com/llvm/llvm-project/issues/116902,LLVM,B,branch_num,"C++ standard library,function"
goto-label-after-if,no code here can be (void *) 0 or goto labels,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=120332,GCC,L,"line,branch_val,branch_num","if,loop,switch-case,no code"
cpp-extern-pass-pointer,,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=120348,GCC,L,line,"extern,function,loop,return,variable scope,C++"
LineCoverageBug.DISTRO_INFO_1(bug),old Python enum; FIXME(done) this name was overloaded; some are actually just conventions (not crazily wrong),dup,GCC,L,line,"multiline"
LineCoverageBug.GREP_1,old Python enum,dup,GCC
LineCoverageBug.LZMA_2,old Python enum,dup,GCC,L,line,"multiline,ternary"
LineCoverageBug.MAWK_1,old Python enum; a known limit https://clang.llvm.org/docs/SourceBasedCodeCoverage.html#drawbacks-and-limitations but very commonly manifesting in real-world projects e.g. custom exit; parse_opts(); usage() etc; when the caller site is a function pointer I don't know whether it is feasible,dup,LLVM,"L,B","line,branch_val","exit/longjmp/setjmp/exception"

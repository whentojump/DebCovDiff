from pathlib import Path
import os
import json
from utils import myjson, lcov
from oracles import mcdc, line_coverage, branch_coverage
from utils.logger import get_logger
logger = get_logger(__name__)
from utils.utils import (
    debug_section,
    info_section,
    warning_section,
)
from oracles.history import (
    LineCoverageHistory,
    BranchCoverageHistory,
    McdcHistory,
    repeat,
)
from oracles.inconsistency import (
    Action,
    Inconsistency,
    policies,
)

def run(package_name, show_source=False) -> tuple[int, int, int]:
    """
    Assumption(s)
    -------------

      1. Two recent sbuild runs: first with GCC, then with LLVM.
      2. JSON files have been generated at build directories.

    """

    logger.info("===========================================")
    logger.info("== Process results from a Debian package ==")
    logger.info("===========================================")

    info_section(logger, "Collect files")

    # sbuild artifact directories, e.g.
    #
    #   [
    #     "/var/lib/sbuild/build/distro-info-AhbuMT",
    #     "/var/lib/sbuild/build/distro-info-EtbShW",
    #   ]
    gcc_host_build_dirs = list(Path('/var/lib/sbuild/build').glob(f"{package_name}-gcc-*"))
    gcc_host_build_dirs.sort(key=os.path.getmtime)

    llvm_host_build_dirs = list(Path('/var/lib/sbuild/build').glob(f"{package_name}-clang-*"))
    llvm_host_build_dirs.sort(key=os.path.getmtime)

    # Build directory on host, e.g.
    #
    #   "/var/lib/sbuild/build/distro-info-AhbuMT"
    #
    gcc_host_build_dir  = gcc_host_build_dirs[-1]
    llvm_host_build_dir = llvm_host_build_dirs[-1]

    # Build directory in chroot, e.g.
    #
    #   "/build/distro-info-AhbuMT"
    #
    gcc_chroot_build_dir  = Path("/build") / (gcc_host_build_dir.relative_to("/var/lib/sbuild/build"))
    llvm_chroot_build_dir = Path("/build") / (llvm_host_build_dir.relative_to("/var/lib/sbuild/build"))

    gcc_json_filenames = list(gcc_host_build_dir.rglob('*.gcov.json'))
    # rglob() output order is not deterministic...
    gcc_json_filenames = sorted(gcc_json_filenames)
    llvm_json_filename = llvm_host_build_dir / 'default.json'
    llvm_lcov_filename = llvm_host_build_dir / 'default.lcov.txt'

    debug_section(logger, "JSON file(s) generated by GCC", '-')
    for p in gcc_json_filenames:
        logger.debug(p)
    debug_section(logger, "JSON and LCOV file generated by LLVM", '-')
    logger.debug(llvm_json_filename)
    logger.debug(llvm_lcov_filename)

    debug_section(logger, "Read source file list from JSON file(s) generated by GCC", '-')

    gcc_filename_to_json_index_map: dict[str, list[int|Path]] = {}
    gcc_filename_list: list[str] = []

    for gcc_json_filename in gcc_json_filenames:

        with open(gcc_json_filename) as f:
            gcc_json = json.load(f)

        gcc_num_files = len(myjson.get_file_list_from_gcc_json(gcc_json))

        # E.g.
        #     /var/lib/sbuild/build/distro-info-AhbuMT/distro-info-1.5+deb12u1/debian-distro-info.gcov.json
        # =>  /var/lib/sbuild/build/distro-info-AhbuMT/distro-info-1.5+deb12u1/
        # =>  ./distro-info-1.5+deb12u1/
        # =>  /build/distro-info-AhbuMT/distro-info-1.5+deb12u1/
        file_name_prefix = gcc_chroot_build_dir / gcc_json_filename.parents[0].relative_to(gcc_host_build_dir)

        for i in range(gcc_num_files):
            file_name = myjson.get_nth_file_name_from_gcc_json(gcc_json, i)
            try:
                #
                # Canonicalize between GCC and LLVM
                #

                # E.g. /build/distro-info-AhbuMT/distro-info-1.5+deb12u1/whatever/../distro-info-util.c
                file_name = file_name_prefix / file_name
                # E.g. ./distro-info-1.5+deb12u1/whatever/../distro-info-util.c
                file_name = file_name.relative_to(gcc_chroot_build_dir)
                # E.g.
                # After resolve():     $PWD/distro-info-1.5+deb12u1/distro-info-util.c
                # After relative_to(): ./distro-info-1.5+deb12u1/distro-info-util.c
                file_name = file_name.resolve().relative_to(os.getcwd())
            except(ValueError): # System headers under /usr/include/ etc
                pass

            file_name = str(file_name)

            logger.debug(file_name)
            myjson.set_nth_file_name_from_gcc_json(gcc_json, i, file_name)

            if file_name in gcc_filename_to_json_index_map:
                gcc_filename_to_json_index_map[file_name].append(gcc_json_filename)
                gcc_filename_to_json_index_map[file_name].append(i)
            else:
                gcc_filename_to_json_index_map[file_name] = [ gcc_json_filename, i ]

            gcc_filename_list.append(file_name)

    debug_section(logger, "Read source file list from JSON file generated by LLVM", '-')

    with open(llvm_json_filename) as f:
        llvm_json = json.load(f)

    llvm_num_files = len(myjson.get_file_list_from_llvm_json(llvm_json))

    llvm_filename_to_json_index_map: dict[str, int] = {}
    llvm_filename_list: list[str] = []

    for i in range(llvm_num_files):

        file_name = myjson.get_nth_file_name_from_llvm_json(llvm_json, i)

        file_name = canonicalize_llvm_file_name(
            file_name,
            llvm_chroot_build_dir,
            llvm_host_build_dir,
        )

        logger.debug(file_name)
        myjson.set_nth_file_name_from_llvm_json(llvm_json, i, file_name)

        llvm_filename_to_json_index_map[file_name] = i
        llvm_filename_list.append(file_name)

    debug_section(logger, "Read source file list from LCOV file generated by LLVM", '-')

    llvm_lcov_data = lcov.get_lcov_data(llvm_lcov_filename)

    llvm_lcov_num_files = len(llvm_lcov_data)
    assert llvm_lcov_num_files == llvm_num_files, \
           "Numbers of file(s) differ in LLVM's JSON and LCOV output"

    llvm_filename_to_lcov_data_index_map: dict[str, int] = {}
    llvm_lcov_filename_list: list[str] = []

    for i in range(llvm_lcov_num_files):

        file_name = lcov.get_nth_file_name_from_lcov_data(llvm_lcov_data, i)

        file_name = canonicalize_llvm_file_name(
            file_name,
            llvm_chroot_build_dir,
            llvm_host_build_dir,
        )

        logger.debug(file_name)
        lcov.set_nth_file_name_from_lcov_data(llvm_lcov_data, i, file_name)

        llvm_filename_to_lcov_data_index_map[file_name] = i
        llvm_lcov_filename_list.append(file_name)

    debug_section(logger, "Read coverage from previous runs", '-')

    line_coverage_history_file = f"/var/lib/sbuild/build/{package_name}/line_coverage_history.json"
    line_coverage_history: LineCoverageHistory = {}

    try:
        with open(line_coverage_history_file, 'r') as f:
            line_coverage_history = json.load(f)
    except FileNotFoundError:
        pass

    branch_coverage_history_file = f"/var/lib/sbuild/build/{package_name}/branch_coverage_history.json"
    branch_coverage_history: BranchCoverageHistory = {}

    try:
        with open(branch_coverage_history_file, 'r') as f:
            branch_coverage_history = json.load(f)
    except FileNotFoundError:
        pass

    mcdc_history_file = f"/var/lib/sbuild/build/{package_name}/mcdc_history.json"
    mcdc_history: McdcHistory = {}

    try:
        with open(mcdc_history_file, 'r') as f:
            mcdc_history = json.load(f)
    except FileNotFoundError:
        pass

    line_coverage_site_cnt   = 0
    branch_coverage_site_cnt = 0
    mcdc_site_cnt            = 0

    for file_name in llvm_filename_list:
        if file_name in gcc_filename_to_json_index_map:

            info_section(logger, f"Comparing {file_name}", divider='=')

            if (len(gcc_filename_to_json_index_map[file_name]) != 2):
                if file_name == 'lz4-1.9.4/programs/util.h':
                    gcc_json_filename = gcc_filename_to_json_index_map[file_name][4]
                    gcc_i = gcc_filename_to_json_index_map[file_name][5]
                elif file_name in [
                    'grep-3.8/src/system.h',
                    'iproute2-6.1.0/include/json_print.h',
                    'iproute2-6.1.0/include/libnetlink.h',
                    'iproute2-6.1.0/include/list.h',
                    'iproute2-6.1.0/include/utils.h',
                    'iproute2-6.1.0/ip/ila_common.h',
                    'iproute2-6.1.0/ip/ip_common.h',
                    'lz4-1.9.4/lib/lz4.c',
                    'lzma-9.22/CPP/7zip/Common/FileStreams.h',
                    'lzma-9.22/CPP/Common/C_FileIO.h',
                    'lzma-9.22/CPP/Common/MyCom.h',
                    'lzma-9.22/CPP/Common/MyGuidDef.h',
                    'lzma-9.22/CPP/Common/MyWindows.h',
                    'lzo2-2.10/src/compr1b.h',
                    'lzo2-2.10/src/compr1c.h',
                    'lzo2-2.10/src/lzo1a_cm.ch',
                    'lzo2-2.10/src/lzo1b_c.ch',
                    'lzo2-2.10/src/lzo1b_cm.ch',
                    'lzo2-2.10/src/lzo1b_cr.ch',
                    'lzo2-2.10/src/lzo1b_d.ch',
                    'lzo2-2.10/src/lzo1b_r.ch',
                    'lzo2-2.10/src/lzo1b_sm.ch',
                    'lzo2-2.10/src/lzo1b_tm.ch',
                    'lzo2-2.10/src/lzo1f_d.ch',
                    'lzo2-2.10/src/lzo1x_9x.c',
                    'lzo2-2.10/src/lzo1x_c.ch',
                    'lzo2-2.10/src/lzo1x_d.ch',
                    'lzo2-2.10/src/lzo1x_d3.c',
                    'lzo2-2.10/src/lzo1x_oo.ch',
                    'lzo2-2.10/src/lzo2a_d.ch',
                    'lzo2-2.10/src/lzo_func.h',
                    'lzo2-2.10/src/lzo_mchw.ch',
                    'lzo2-2.10/src/lzo_swd.ch',
                    'util-linux-2.38.1/include/strutils.h',
                    'e2fsprogs-1.47.0/lib/ext2fs/ext2_fs.h',
                    'e2fsprogs-1.47.0/lib/ext2fs/ext2fs.h',
                    'e2fsprogs-1.47.0/lib/support/quotaio.h',
                    'wget-1.21.3/src/wget.h',
                    'pam-1.5.2/libpam/include/pam_inline.h',
                    'pam-1.5.2/modules/pam_unix/md5.c',
                    'pam-1.5.2/modules/pam_unix/md5_crypt.c',
                ]:
                    gcc_json_filename = gcc_filename_to_json_index_map[file_name][0]
                    gcc_i = gcc_filename_to_json_index_map[file_name][1]
                else:
                    print(file_name)
                    print(gcc_filename_to_json_index_map[file_name])
                    exit()
            else:
                gcc_json_filename, gcc_i = gcc_filename_to_json_index_map[file_name]
            llvm_i = llvm_filename_to_json_index_map[file_name]

            with open(gcc_json_filename) as f:
                gcc_json = json.load(f)

            gcc_file_json = myjson.get_nth_file_from_gcc_json(gcc_json, gcc_i)
            llvm_file_json = myjson.get_nth_file_from_llvm_json(llvm_json, llvm_i)

            # Because we are reading JSON files on disk once again, update them
            # with the canonicalized paths.
            myjson.set_nth_file_name_from_gcc_json(gcc_json, gcc_i, file_name)

            mcdc_site_cnt += mcdc.compare_gcc_llvm(
                source_dir=gcc_host_build_dir,
                file_name=file_name,
                gcc_file_json=gcc_file_json,
                llvm_file_json=llvm_file_json,
                repeat=repeat,
                mcdc_history=mcdc_history,
                show_source=show_source,
            )

            branch_coverage_site_cnt += branch_coverage.compare_gcc_llvm(
                source_dir=gcc_host_build_dir,
                file_name=file_name,
                gcc_file_json=gcc_file_json,
                llvm_file_json=llvm_file_json,
                repeat=repeat,
                branch_coverage_history=branch_coverage_history,
                show_source=show_source,
            )

            assert file_name in llvm_filename_to_lcov_data_index_map

            llvm_file_lcov_data = llvm_lcov_data[llvm_filename_to_lcov_data_index_map[file_name]]
            line_coverage_site_cnt += line_coverage.compare_gcc_llvm(
                source_dir=gcc_host_build_dir,
                file_name=file_name,
                gcc_file_json=gcc_file_json,
                llvm_file_json=llvm_file_json,
                llvm_file_lcov_data=llvm_file_lcov_data,
                repeat=repeat,
                line_coverage_history=line_coverage_history,
                show_source=show_source,
            )

    if (Action.SILENT not in policies[Inconsistency.LINE_COV]):
        warning_section(logger, "Updated line coverage history")

        for file_name in line_coverage_history:
            logger.warning(f"{file_name}")
            for line_number in line_coverage_history[file_name]:
                logger.warning(f"  {line_number}: {line_coverage_history[file_name][line_number]}")
            logger.warning("")

    with open(line_coverage_history_file, 'w') as f:
        json.dump(line_coverage_history, f, indent=4)

    if (Action.SILENT not in policies[Inconsistency.BRANCH_COV_COUNT]):
        warning_section(logger, "Updated branch coverage history")

        for file_name in branch_coverage_history:
            logger.warning(f"{file_name}")
            for line_number in branch_coverage_history[file_name]:
                logger.warning(f"  {line_number}: {branch_coverage_history[file_name][line_number]}")
            logger.warning("")

    with open(branch_coverage_history_file, 'w') as f:
        json.dump(branch_coverage_history, f, indent=4)

    warning_section(logger, "Number of sites compared")
    logger.warning(f"Line coverage:   {line_coverage_site_cnt}")
    logger.warning(f"Branch coverage: {branch_coverage_site_cnt}")
    logger.warning(f"MC/DC:           {mcdc_site_cnt}")

    return (line_coverage_site_cnt, branch_coverage_site_cnt, mcdc_site_cnt)

def canonicalize_llvm_file_name(
    file_name: str | Path,
    llvm_chroot_build_dir: str | Path,
    llvm_host_build_dir: str | Path,
) -> str:
    """
    Process filenames read from both LLVM's JSON and LCOV output
    """
    try:
        Path(file_name).relative_to(llvm_chroot_build_dir)

        #
        # Canonicalize between GCC and LLVM
        #

        # Covert absolute path in chroot to absolute path on host
        # E.g.
        #                   /build/distro-info-EtbShW/distro-info-1.5+deb12u1/whatever/../distro-info-util.c
        # =>               ./build/distro-info-EtbShW/distro-info-1.5+deb12u1/whatever/../distro-info-util.c
        # => /var/lib/sbuild/build/distro-info-EtbShW/distro-info-1.5+deb12u1/whatever/../distro-info-util.c
        file_name = Path("/var/lib/sbuild") / (Path(file_name).relative_to("/"))
        # E.g. ./distro-info-1.5+deb12u1/whatever/../distro-info-util.c
        file_name = file_name.relative_to(llvm_host_build_dir)
        # E.g.
        # After resolve():     $PWD/distro-info-1.5+deb12u1/distro-info-util.c
        # After relative_to(): ./distro-info-1.5+deb12u1/distro-info-util.c
        file_name = file_name.resolve().relative_to(os.getcwd())
    except(ValueError): # System headers under /usr/include/ etc
        pass

    file_name = str(file_name)

    return file_name
